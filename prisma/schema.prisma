generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
  @@index([createdById])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                     String                  @id @default(cuid())
  name                   String?
  email                  String?                 @unique
  emailVerified          DateTime?
  image                  String?
  backgroundImage        String?                 @db.Text
  handle                 String?                 @unique
  accounts               Account[]
  sessions               Session[]
  posts                  Post[]
  videos                 Video[]
  videoEngagements       VideoEngagement[]
  comments               Comment[]
  annoucements           Annoucement[]
  annoucementEngagements AnnoucementEngagement[]
  followedBy             FollowEnagegment[]      @relation("follower")
  following              FollowEnagegment[]      @relation("following")
  playlists              Playlist[]
}

model Video {
  id                String             @id @default(cuid())
  title             String?            @db.Text
  thumbnailUrl      String?            @db.Text
  description       String?            @db.Text
  videoUrl          String             @db.Text
  publish           Boolean            @default(true)
  userId            String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  videoEngagements  VideoEngagement[]
  comments          Comment[]
  playlistHasViseos PlaylistHasViseo[]

  @@index([userId])
}

model VideoEngagement {
  id             String         @id @default(cuid())
  videoId        String
  userId         String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  engagementType EngagementType
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  video          Video          @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([videoId, userId])
  @@index([videoId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  message   String   @db.Text
  videoId   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([videoId])
  @@index([userId])
}

model Annoucement {
  id                     String                  @id @default(cuid())
  message                String                  @db.Text
  userId                 String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  annoucementEngagements AnnoucementEngagement[]

  @@index([userId])
}

model AnnoucementEngagement {
  userId         String
  annoucementId  String
  engagementType EngagementType
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  annoucement    Annoucement    @relation(fields: [annoucementId], references: [id], onDelete: Cascade)

  @@id([annoucementId, userId])
  @@index([annoucementId])
  @@index([userId])
}

model FollowEnagegment {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Playlist {
  id                String             @id @default(cuid())
  title             String             @db.Text
  description       String?            @db.Text
  userId            String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  playlistHasViseos PlaylistHasViseo[]

  @@index([userId])
}

model PlaylistHasViseo {
  id         String   @id @default(cuid())
  playlistId String
  videoId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  video      Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([playlistId, videoId])
  @@index([videoId])
  @@index([playlistId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum EngagementType {
  LIKE
  DISLIKE
  VIEW
  SAVE
  COMMENT
  FOLLOW
  SHARE
}
